# -*- coding: utf-8 -*-
"""tensor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C23ccE4-fKJuqFg4cHa3xxONOdNc_LMd
"""

import numpy as np
import os
import tensorflow as tf

# Coordenadas de las ciudades
rio_de_janeiro_coords = np.array([-22.90642, -43.18223])
kazakhstan_coords = np.array([48.019573, 66.923684])

def calculate_distance(coords1, coords2):
    return np.sqrt(np.sum((coords1 - coords2)**2))

N = 250
X_coords = np.random.uniform(low=-90, high=90, size=(N, 2))
X_distances = np.array([calculate_distance(coord, kazakhstan_coords) for coord in X_coords])

y = 2.0 * X_distances + 1.0

train_end = int(0.6 * len(X_distances))
test_start = int(0.8 * len(X_distances))

X_train, y_train = X_distances[:train_end], y[:train_end]
X_test, y_test = X_distances[test_start:], y[test_start:]
X_val, y_val = X_distances[train_end:test_start], y[train_end:test_start]

tf.keras.backend.clear_session()
linear_model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(units=1, input_shape=[1], name='Single')
])

linear_model.compile(optimizer=tf.keras.optimizers.SGD(), loss=tf.keras.losses.mean_squared_error)
print(linear_model.summary())

linear_model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=480, verbose=1)

predictions = linear_model.predict(np.array([[0.0], [2.0], [3.1], [4.2], [5.2]]))

print(np.where(np.isnan(predictions), 0, predictions))

export_path = 'linear-model/1/'
tf.saved_model.save(linear_model, os.path.join('./', export_path))